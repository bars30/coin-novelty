import React from "react";
import { useNavigate } from 'react-router-dom';
import { Web3Storage } from 'web3.storage'
import { Helmet } from "react-helmet"
import { NotificationContainer, NotificationManager } from 'react-notifications';
import Papa from 'papaparse';
import 'react-notifications/lib/notifications.css';
import { PinataSDK } from "pinata";



const Stake = () => {

    const pinata = new PinataSDK({
        pinataJwt: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySW5mb3JtYXRpb24iOnsiaWQiOiIxNjdkNDBlMy02NmI4LTQ2MTQtYmIxZi1iNGQzOTVmMTMzZDYiLCJlbWFpbCI6Im5hci5iYXJzZWdoeWFuOTlAZ21haWwuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInBpbl9wb2xpY3kiOnsicmVnaW9ucyI6W3siZGVzaXJlZFJlcGxpY2F0aW9uQ291bnQiOjEsImlkIjoiRlJBMSJ9LHsiZGVzaXJlZFJlcGxpY2F0aW9uQ291bnQiOjEsImlkIjoiTllDMSJ9XSwidmVyc2lvbiI6MX0sIm1mYV9lbmFibGVkIjpmYWxzZSwic3RhdHVzIjoiQUNUSVZFIn0sImF1dGhlbnRpY2F0aW9uVHlwZSI6InNjb3BlZEtleSIsInNjb3BlZEtleUtleSI6ImI0ZGMyYzBkMGE3MzhhMjVlYmIzIiwic2NvcGVkS2V5U2VjcmV0IjoiMWY2ZmZiNjM3NmNjNGZhNDc5NTA1OTRhOTUzODllMjE3NTU5ZDlmNjBiOTFhZTI4YWMwOGQ0YTBmOGIxYjY3NyIsImV4cCI6MTc2OTg4MTI4N30.7y7hblRzH76ANMPm8iiwTZjhLmi2FjBa_mrX2IUTHw0",
        pinataGateway: "olive-rapid-owl-18.mypinata.cloud",
    });

    const navigate = useNavigate();

    const [gamesList, setGamesList] = React.useState([])

    React.useEffect(() => {
        initialize();
    }, [])

    function makeStorageClient() {
        return new Web3Storage({ token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDdmODc2ZDA3OTE1ZUQ2ODA3NmFhYzU3YzBhMDZlYzgwODUyNDk4QUYiLCJpc3MiOiJ3ZWIzLXN0b3JhZ2UiLCJpYXQiOjE2Mzk1NTM2OTU3NjIsIm5hbWUiOiJub3ZlbHR5In0.NgSw8KJSdxahiHYLVcWs9x5p6t_hqv-EFlkznuyAByM" })
    }
    function makeFileObjects() {
        // You can create File objects from a Blob of binary data
        // see: https://developer.mozilla.org/en-US/docs/Web/API/Blob
        // Here we're just storing a JSON object, but you can store images,
        // audio, or whatever you want!
        const obj = gamesList
        const blob = new Blob([JSON.stringify(obj)], { type: 'application/json' })

        const files = [
            new File([blob], 'games.json')
        ]
        return files
    }
    const initialize = async () => {
        const client = makeStorageClient();
        let newestFile = "";
        const maxResults = 1;
        let response =  null; // Declare response here to ensure it's available throughout the function
        const cid = ""


        try {
        

            // ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ CID
            const files = await pinata.files.list();
            console.log("Files:", files);
            console.log("Files:", files.files[0].cid);
            const cid = files.files[0].cid;
            console.log("üü†cid", cid);
            
            // ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ CID

            try {
                const { data, contentType } = await pinata.gateways.get(cid);
            
                console.log("Content Type:", contentType);
                console.log("Data:", data);
                const jsonData =  data;
                setGamesList(jsonData);
                console.log("üçßü•êüçß", jsonData);
                

            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Pinata:", error);
            }
            
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Pinata:", error);
        }
        

        try {

            



            // for await (const upload of client.list({ maxResults })) {
            //     newestFile = upload.cid;
            // }
            // let cid = "";
            // if (localStorage.getItem("cid")) {
            //     cid = localStorage.getItem("cid");
            //     console.log("ü•¨ü•¨", `https://gateway.pinata.cloud/ipfs/${cid}`);
                
            //     // response = await fetch(`https://gateway.pinata.cloud/ipfs/${cid}`);
            //     response = await fetch("https://gateway.pinata.cloud/ipfs/bafkreid6upzot44mzk77zm7y5lek727tep7opqdjrhkmo7y7tud4j6w7em");
            // } else {
            //     // –ù–æ–≤—ã–π URL —Å JSON-—Ñ–∞–π–ª–æ–º
            //     console.log("ü•¨ü•¨", `https://gateway.pinata.cloud/ipfs/bafkreiesvfn2o4oyd4w24koe2whdqpzuixgcwum7dfxet472ba2ica3tqy`);
            //     response = await fetch("https://gateway.pinata.cloud/ipfs/bafkreid6upzot44mzk77zm7y5lek727tep7opqdjrhkmo7y7tud4j6w7em");
            // }
            // console.log(response);
            
    
            // if (!response.ok) {
            //     throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å JSON —Å –∏–≥—Ä–∞–º–∏ –∏–∑ IPFS.");
            // }
    
            // –ü–∞—Ä—Å–∏–º JSON
            // const jsonData = await response.json();
            // console.log("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã:", jsonData);
            // setGamesList(jsonData); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞:", error);
            NotificationManager.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—ã.");
        }
    };
    
    // // ü•¨ü•¨ü•¨ü•¨
    const buyNFT = async (game) => {
        try {
            if (!game || typeof game.price === "undefined") {
                console.error("–û—à–∏–±–∫–∞: –¶–µ–Ω–∞ –∏–≥—Ä—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞.");
                NotificationManager.error("–¶–µ–Ω–∞ –∏–≥—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", "–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");
                return;
            }
    
            const web3 = new window.Web3(window.ethereum);
            const accounts = await web3.eth.getAccounts();
    
            const priceInWei = web3.utils.toWei(game.price.toString(), "ether");
    
            const res = await web3.eth.sendTransaction({
                to: "0x962C3B2D6Decc54Bd482517c7284116160B0d84b",
                from: accounts[0],
                value: priceInWei
            });
    
            if (!res) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");
                NotificationManager.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ NFT.", "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞");
                return;
            }
    
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ –∏ —Ü–µ–Ω–µ –∏–≥—Ä—ã
            let updatedGame = { ...game, owner: accounts[0], price: game.price + 0.2 };
            let updatedGamesList = gamesList.map(g => g.name === game.name ? updatedGame : g);
            setGamesList(updatedGamesList);
    
            // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Pinata
            const pinata = new PinataSDK({
                pinataJwt: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySW5mb3JtYXRpb24iOnsiaWQiOiIxNjdkNDBlMy02NmI4LTQ2MTQtYmIxZi1iNGQzOTVmMTMzZDYiLCJlbWFpbCI6Im5hci5iYXJzZWdoeWFuOTlAZ21haWwuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInBpbl9wb2xpY3kiOnsicmVnaW9ucyI6W3siZGVzaXJlZFJlcGxpY2F0aW9uQ291bnQiOjEsImlkIjoiRlJBMSJ9LHsiZGVzaXJlZFJlcGxpY2F0aW9uQ291bnQiOjEsImlkIjoiTllDMSJ9XSwidmVyc2lvbiI6MX0sIm1mYV9lbmFibGVkIjpmYWxzZSwic3RhdHVzIjoiQUNUSVZFIn0sImF1dGhlbnRpY2F0aW9uVHlwZSI6InNjb3BlZEtleSIsInNjb3BlZEtleUtleSI6ImI0ZGMyYzBkMGE3MzhhMjVlYmIzIiwic2NvcGVkS2V5U2VjcmV0IjoiMWY2ZmZiNjM3NmNjNGZhNDc5NTA1OTRhOTUzODllMjE3NTU5ZDlmNjBiOTFhZTI4YWMwOGQ0YTBmOGIxYjY3NyIsImV4cCI6MTc2OTg4MTI4N30.7y7hblRzH76ANMPm8iiwTZjhLmi2FjBa_mrX2IUTHw0",
                pinataGateway: "olive-rapid-owl-18.mypinata.cloud",
            });
    
            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Blob —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –∏–≥—Ä
            const updatedGamesListJson = JSON.stringify(updatedGamesList);
            const file = new Blob([updatedGamesListJson], { type: "application/json" });
            const fileName = "games.json"; // –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Pinata
            try {
                const upload = await pinata.upload.file(file, fileName);
                console.log("–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Pinata:", upload);
    localStorage.setItem("cid", upload.cid);
                NotificationManager.success("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!", "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!");

                // window.location.reload()
            } catch (pinataError) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –≤ Pinata:", pinataError);
                NotificationManager.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ IPFS.", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏");
            }
    
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            setTimeout(() => {
                setGamesList([]); // –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫
                initialize(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            }, 2500);
    
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –≤ buyNFT:", error);
            NotificationManager.error("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.", "–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");
        }
    };
    


    

    

    return (
        <div className="bg-bgcolor min-h-screen">
            <Helmet>
                <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js" />
            </Helmet>
            {gamesList.length > 0 ?
                <>
                    <h1 onClick={() => navigate('/')} className="text-4xl font-extrabold pt-10"><span className="bg-clip-text text-transparent bg-gradient-to-r from-amber-500 to-amber-300 filter drop-shadow hover:drop-shadow-lg">NOVELTY - NFT STORE</span></h1><br />
                    <table className="table-auto border-collapse w-full my-6">
                        <tbody className="text-md font-normal text-white">
                            <tr className="border-b border-slate-200 py-10">
                                <th className="px-2 py-2">S. No.</th>
                                <th className="px-2 py-2">Players</th>
                                <th className="px-2 py-2">Location</th>
                                <th className="px-2 py-2">Game Link</th>
                                <th className="px-2 py-2">NFT Price</th>
                                <th className="px-2 py-2">Owned By</th>
                                <th className="px-2 py-2">Buy</th>
                            </tr>
                            {gamesList.length > 0 ? gamesList.map((game, index) =>
                                <tr className="hover:bg-slate-800 border-b border-slate-200 py-10">
                                    <td className="px-2 py-2">{index + 1}</td>
                                    <td className="px-2 py-2">{game.name}</td>
                                    <td className="px-2 py-2">{game.place}</td>
                                    <td className="px-2 py-2"><a href={game.url} target="_blank" className="text-blue-600">Click To Open</a></td>
                                    <td className="px-2 py-2">{game.price}</td>
                                    <td className="px-2 py-2">0xFE41bEcF3017775cA14E74bd778c2b13a5C67649</td>
                                    <td className="px-2 py-2">
                                        <button onClick={() => buyNFT(game)} className="text-white text-lg font-medium rounded-xl px-8 py-2 bg-gradient-to-r from-amber-600 to-amber-300 hover:from-amber-700 hover:to-amber-500 hover:shadow-2xl">Buy</button>
                                    </td>
                                </tr>
                            ) : <></>}
                        </tbody>
                    </table>
                </>
                :
                <div className="flex h-screen">
                    <div className="m-auto">
                        <h1 className="text-4xl font-extrabold bg-clip-text text-transparent bg-gradient-to-r from-amber-500 to-amber-300 filter drop-shadow hover:drop-shadow-lg pb-8 animate-pulse">Loading NFT Store...</h1>
                    </div>
                </div>
            }
            <NotificationContainer />
        </div >
    );
};

export default Stake;